from collections import defaultdict

def build_debruijn_graph(kmers):
    graph = defaultdict(list)
    for kmer in kmers:
        prefix = kmer[:-1]
        suffix = kmer[1:]
        graph[prefix].append(suffix)
    return graph

def find_eulerian_path(graph):
    indegree = defaultdict(int)
    outdegree = defaultdict(int)

    for node, neighbors in graph.items():
        outdegree[node] = len(neighbors)
        for neighbor in neighbors:
            indegree[neighbor] += 1

    start_node = None
    end_node = None

    for node in indegree.keys():
        if indegree[node] < outdegree[node]:
            start_node = node
        elif indegree[node] > outdegree[node]:
            end_node = node

    if start_node and end_node:
        graph[end_node].append(start_node)

    stack = [start_node] if start_node else [next(iter(graph.keys()))]
    path = []

    while stack:
        current_node = stack[-1]

        if graph[current_node]:
            next_node = graph[current_node].pop()
            stack.append(next_node)
        else:
            path.append(stack.pop())

    path.reverse()
    return path[:-1] if start_node else path

def contigs_from_path(path):
    contigs = [path[0]]
    for node in path[1:]:
        contigs[-1] += node[-1]
        if node[:-1] not in path:
            contigs.append(node)
    return contigs

# Sample Input
k_mers = ["ATG", "ATG", "TGT", "TGG", "CAT", "GGA", "GAT", "AGA"]

# Generate Contigs
debruijn_graph = build_debruijn_graph(k_mers)
eulerian_path = find_eulerian_path(debruijn_graph)
contigs = contigs_from_path(eulerian_path)

# Print Output
print("Contigs:", contigs)
